// copyright: Copyright (c) 2024 Lowell D. Thomas, all rights reserved<br>
//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>
//
// Generated by apg-js, Version 4.4.0 [apg-js](https://github.com/ldthomas/apg-js)
export default function grammar(){
  // ```
  // SUMMARY
  //      rules = 91
  //       udts = 0
  //    opcodes = 423
  //        ---   ABNF original opcodes
  //        ALT = 41
  //        CAT = 60
  //        REP = 32
  //        RNM = 174
  //        TLS = 66
  //        TBS = 30
  //        TRG = 20
  //        ---   SABNF superset opcodes
  //        UDT = 0
  //        AND = 0
  //        NOT = 0
  // characters = [9 - 1114111]
  // ```
  /* OBJECT IDENTIFIER (for internal parser use) */
  this.grammarObject = 'grammarObject';

  /* RULES */
  this.rules = [];
  this.rules[0] = { name: 'jsonpath-query', lower: 'jsonpath-query', index: 0, isBkr: false };
  this.rules[1] = { name: 'segments', lower: 'segments', index: 1, isBkr: false };
  this.rules[2] = { name: 'B', lower: 'b', index: 2, isBkr: false };
  this.rules[3] = { name: 'S', lower: 's', index: 3, isBkr: false };
  this.rules[4] = { name: 'root-identifier', lower: 'root-identifier', index: 4, isBkr: false };
  this.rules[5] = { name: 'selector', lower: 'selector', index: 5, isBkr: false };
  this.rules[6] = { name: 'name-selector', lower: 'name-selector', index: 6, isBkr: false };
  this.rules[7] = { name: 'string-literal', lower: 'string-literal', index: 7, isBkr: false };
  this.rules[8] = { name: 'double-quoted', lower: 'double-quoted', index: 8, isBkr: false };
  this.rules[9] = { name: 'single-quoted', lower: 'single-quoted', index: 9, isBkr: false };
  this.rules[10] = { name: 'ESC', lower: 'esc', index: 10, isBkr: false };
  this.rules[11] = { name: 'unescaped', lower: 'unescaped', index: 11, isBkr: false };
  this.rules[12] = { name: 'escapable', lower: 'escapable', index: 12, isBkr: false };
  this.rules[13] = { name: 'hexchar', lower: 'hexchar', index: 13, isBkr: false };
  this.rules[14] = { name: 'non-surrogate', lower: 'non-surrogate', index: 14, isBkr: false };
  this.rules[15] = { name: 'high-surrogate', lower: 'high-surrogate', index: 15, isBkr: false };
  this.rules[16] = { name: 'low-surrogate', lower: 'low-surrogate', index: 16, isBkr: false };
  this.rules[17] = { name: 'HEXDIG', lower: 'hexdig', index: 17, isBkr: false };
  this.rules[18] = { name: 'wildcard-selector', lower: 'wildcard-selector', index: 18, isBkr: false };
  this.rules[19] = { name: 'index-selector', lower: 'index-selector', index: 19, isBkr: false };
  this.rules[20] = { name: 'int', lower: 'int', index: 20, isBkr: false };
  this.rules[21] = { name: 'DIGIT1', lower: 'digit1', index: 21, isBkr: false };
  this.rules[22] = { name: 'slice-selector', lower: 'slice-selector', index: 22, isBkr: false };
  this.rules[23] = { name: 'start', lower: 'start', index: 23, isBkr: false };
  this.rules[24] = { name: 'end', lower: 'end', index: 24, isBkr: false };
  this.rules[25] = { name: 'step', lower: 'step', index: 25, isBkr: false };
  this.rules[26] = { name: 'filter-selector', lower: 'filter-selector', index: 26, isBkr: false };
  this.rules[27] = { name: 'logical-expr', lower: 'logical-expr', index: 27, isBkr: false };
  this.rules[28] = { name: 'logical-or-expr', lower: 'logical-or-expr', index: 28, isBkr: false };
  this.rules[29] = { name: 'logical-and-expr', lower: 'logical-and-expr', index: 29, isBkr: false };
  this.rules[30] = { name: 'basic-expr', lower: 'basic-expr', index: 30, isBkr: false };
  this.rules[31] = { name: 'paren-expr', lower: 'paren-expr', index: 31, isBkr: false };
  this.rules[32] = { name: 'logical-not-op', lower: 'logical-not-op', index: 32, isBkr: false };
  this.rules[33] = { name: 'test-expr', lower: 'test-expr', index: 33, isBkr: false };
  this.rules[34] = { name: 'filter-query', lower: 'filter-query', index: 34, isBkr: false };
  this.rules[35] = { name: 'rel-query', lower: 'rel-query', index: 35, isBkr: false };
  this.rules[36] = { name: 'current-node-identifier', lower: 'current-node-identifier', index: 36, isBkr: false };
  this.rules[37] = { name: 'comparison-expr', lower: 'comparison-expr', index: 37, isBkr: false };
  this.rules[38] = { name: 'literal', lower: 'literal', index: 38, isBkr: false };
  this.rules[39] = { name: 'comparable', lower: 'comparable', index: 39, isBkr: false };
  this.rules[40] = { name: 'comparison-op', lower: 'comparison-op', index: 40, isBkr: false };
  this.rules[41] = { name: 'singular-query', lower: 'singular-query', index: 41, isBkr: false };
  this.rules[42] = { name: 'rel-singular-query', lower: 'rel-singular-query', index: 42, isBkr: false };
  this.rules[43] = { name: 'abs-singular-query', lower: 'abs-singular-query', index: 43, isBkr: false };
  this.rules[44] = { name: 'singular-query-segments', lower: 'singular-query-segments', index: 44, isBkr: false };
  this.rules[45] = { name: 'name-segment', lower: 'name-segment', index: 45, isBkr: false };
  this.rules[46] = { name: 'index-segment', lower: 'index-segment', index: 46, isBkr: false };
  this.rules[47] = { name: 'number', lower: 'number', index: 47, isBkr: false };
  this.rules[48] = { name: 'frac', lower: 'frac', index: 48, isBkr: false };
  this.rules[49] = { name: 'exp', lower: 'exp', index: 49, isBkr: false };
  this.rules[50] = { name: 'true', lower: 'true', index: 50, isBkr: false };
  this.rules[51] = { name: 'false', lower: 'false', index: 51, isBkr: false };
  this.rules[52] = { name: 'null', lower: 'null', index: 52, isBkr: false };
  this.rules[53] = { name: 'function-name', lower: 'function-name', index: 53, isBkr: false };
  this.rules[54] = { name: 'function-name-first', lower: 'function-name-first', index: 54, isBkr: false };
  this.rules[55] = { name: 'function-name-char', lower: 'function-name-char', index: 55, isBkr: false };
  this.rules[56] = { name: 'LCALPHA', lower: 'lcalpha', index: 56, isBkr: false };
  this.rules[57] = { name: 'function-expr', lower: 'function-expr', index: 57, isBkr: false };
  this.rules[58] = { name: 'function-argument', lower: 'function-argument', index: 58, isBkr: false };
  this.rules[59] = { name: 'segment', lower: 'segment', index: 59, isBkr: false };
  this.rules[60] = { name: 'child-segment', lower: 'child-segment', index: 60, isBkr: false };
  this.rules[61] = { name: 'bracketed-selection', lower: 'bracketed-selection', index: 61, isBkr: false };
  this.rules[62] = { name: 'member-name-shorthand', lower: 'member-name-shorthand', index: 62, isBkr: false };
  this.rules[63] = { name: 'name-first', lower: 'name-first', index: 63, isBkr: false };
  this.rules[64] = { name: 'name-char', lower: 'name-char', index: 64, isBkr: false };
  this.rules[65] = { name: 'DIGIT', lower: 'digit', index: 65, isBkr: false };
  this.rules[66] = { name: 'ALPHA', lower: 'alpha', index: 66, isBkr: false };
  this.rules[67] = { name: 'descendant-segment', lower: 'descendant-segment', index: 67, isBkr: false };
  this.rules[68] = { name: 'normalized-path', lower: 'normalized-path', index: 68, isBkr: false };
  this.rules[69] = { name: 'normal-index-segment', lower: 'normal-index-segment', index: 69, isBkr: false };
  this.rules[70] = { name: 'normal-selector', lower: 'normal-selector', index: 70, isBkr: false };
  this.rules[71] = { name: 'normal-name-selector', lower: 'normal-name-selector', index: 71, isBkr: false };
  this.rules[72] = { name: 'normal-single-quoted', lower: 'normal-single-quoted', index: 72, isBkr: false };
  this.rules[73] = { name: 'normal-unescaped', lower: 'normal-unescaped', index: 73, isBkr: false };
  this.rules[74] = { name: 'normal-escapable', lower: 'normal-escapable', index: 74, isBkr: false };
  this.rules[75] = { name: 'normal-hexchar', lower: 'normal-hexchar', index: 75, isBkr: false };
  this.rules[76] = { name: 'normal-HEXDIG', lower: 'normal-hexdig', index: 76, isBkr: false };
  this.rules[77] = { name: 'normal-index-selector', lower: 'normal-index-selector', index: 77, isBkr: false };
  this.rules[78] = { name: 'dot-prefix', lower: 'dot-prefix', index: 78, isBkr: false };
  this.rules[79] = { name: 'double-dot-prefix', lower: 'double-dot-prefix', index: 79, isBkr: false };
  this.rules[80] = { name: 'left-bracket', lower: 'left-bracket', index: 80, isBkr: false };
  this.rules[81] = { name: 'right-bracket', lower: 'right-bracket', index: 81, isBkr: false };
  this.rules[82] = { name: 'left-paren', lower: 'left-paren', index: 82, isBkr: false };
  this.rules[83] = { name: 'right-paren', lower: 'right-paren', index: 83, isBkr: false };
  this.rules[84] = { name: 'comma', lower: 'comma', index: 84, isBkr: false };
  this.rules[85] = { name: 'colon', lower: 'colon', index: 85, isBkr: false };
  this.rules[86] = { name: 'dquote', lower: 'dquote', index: 86, isBkr: false };
  this.rules[87] = { name: 'squote', lower: 'squote', index: 87, isBkr: false };
  this.rules[88] = { name: 'questionmark', lower: 'questionmark', index: 88, isBkr: false };
  this.rules[89] = { name: 'disjunction', lower: 'disjunction', index: 89, isBkr: false };
  this.rules[90] = { name: 'conjunction', lower: 'conjunction', index: 90, isBkr: false };

  /* UDTS */
  this.udts = [];

  /* OPCODES */
  /* jsonpath-query */
  this.rules[0].opcodes = [];
  this.rules[0].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[0].opcodes[1] = { type: 4, index: 4 };// RNM(root-identifier)
  this.rules[0].opcodes[2] = { type: 4, index: 1 };// RNM(segments)

  /* segments */
  this.rules[1].opcodes = [];
  this.rules[1].opcodes[0] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[1].opcodes[1] = { type: 2, children: [2,3] };// CAT
  this.rules[1].opcodes[2] = { type: 4, index: 3 };// RNM(S)
  this.rules[1].opcodes[3] = { type: 4, index: 59 };// RNM(segment)

  /* B */
  this.rules[2].opcodes = [];
  this.rules[2].opcodes[0] = { type: 1, children: [1,2,3,4] };// ALT
  this.rules[2].opcodes[1] = { type: 6, string: [32] };// TBS
  this.rules[2].opcodes[2] = { type: 6, string: [9] };// TBS
  this.rules[2].opcodes[3] = { type: 6, string: [10] };// TBS
  this.rules[2].opcodes[4] = { type: 6, string: [13] };// TBS

  /* S */
  this.rules[3].opcodes = [];
  this.rules[3].opcodes[0] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[3].opcodes[1] = { type: 4, index: 2 };// RNM(B)

  /* root-identifier */
  this.rules[4].opcodes = [];
  this.rules[4].opcodes[0] = { type: 7, string: [36] };// TLS

  /* selector */
  this.rules[5].opcodes = [];
  this.rules[5].opcodes[0] = { type: 1, children: [1,2,3,4,5] };// ALT
  this.rules[5].opcodes[1] = { type: 4, index: 6 };// RNM(name-selector)
  this.rules[5].opcodes[2] = { type: 4, index: 18 };// RNM(wildcard-selector)
  this.rules[5].opcodes[3] = { type: 4, index: 22 };// RNM(slice-selector)
  this.rules[5].opcodes[4] = { type: 4, index: 19 };// RNM(index-selector)
  this.rules[5].opcodes[5] = { type: 4, index: 26 };// RNM(filter-selector)

  /* name-selector */
  this.rules[6].opcodes = [];
  this.rules[6].opcodes[0] = { type: 4, index: 7 };// RNM(string-literal)

  /* string-literal */
  this.rules[7].opcodes = [];
  this.rules[7].opcodes[0] = { type: 1, children: [1,6] };// ALT
  this.rules[7].opcodes[1] = { type: 2, children: [2,3,5] };// CAT
  this.rules[7].opcodes[2] = { type: 4, index: 86 };// RNM(dquote)
  this.rules[7].opcodes[3] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[7].opcodes[4] = { type: 4, index: 8 };// RNM(double-quoted)
  this.rules[7].opcodes[5] = { type: 4, index: 86 };// RNM(dquote)
  this.rules[7].opcodes[6] = { type: 2, children: [7,8,10] };// CAT
  this.rules[7].opcodes[7] = { type: 4, index: 87 };// RNM(squote)
  this.rules[7].opcodes[8] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[7].opcodes[9] = { type: 4, index: 9 };// RNM(single-quoted)
  this.rules[7].opcodes[10] = { type: 4, index: 87 };// RNM(squote)

  /* double-quoted */
  this.rules[8].opcodes = [];
  this.rules[8].opcodes[0] = { type: 1, children: [1,2,3,6] };// ALT
  this.rules[8].opcodes[1] = { type: 4, index: 11 };// RNM(unescaped)
  this.rules[8].opcodes[2] = { type: 6, string: [39] };// TBS
  this.rules[8].opcodes[3] = { type: 2, children: [4,5] };// CAT
  this.rules[8].opcodes[4] = { type: 4, index: 10 };// RNM(ESC)
  this.rules[8].opcodes[5] = { type: 6, string: [34] };// TBS
  this.rules[8].opcodes[6] = { type: 2, children: [7,8] };// CAT
  this.rules[8].opcodes[7] = { type: 4, index: 10 };// RNM(ESC)
  this.rules[8].opcodes[8] = { type: 4, index: 12 };// RNM(escapable)

  /* single-quoted */
  this.rules[9].opcodes = [];
  this.rules[9].opcodes[0] = { type: 1, children: [1,2,3,6] };// ALT
  this.rules[9].opcodes[1] = { type: 4, index: 11 };// RNM(unescaped)
  this.rules[9].opcodes[2] = { type: 6, string: [34] };// TBS
  this.rules[9].opcodes[3] = { type: 2, children: [4,5] };// CAT
  this.rules[9].opcodes[4] = { type: 4, index: 10 };// RNM(ESC)
  this.rules[9].opcodes[5] = { type: 6, string: [39] };// TBS
  this.rules[9].opcodes[6] = { type: 2, children: [7,8] };// CAT
  this.rules[9].opcodes[7] = { type: 4, index: 10 };// RNM(ESC)
  this.rules[9].opcodes[8] = { type: 4, index: 12 };// RNM(escapable)

  /* ESC */
  this.rules[10].opcodes = [];
  this.rules[10].opcodes[0] = { type: 6, string: [92] };// TBS

  /* unescaped */
  this.rules[11].opcodes = [];
  this.rules[11].opcodes[0] = { type: 1, children: [1,2,3,4,5] };// ALT
  this.rules[11].opcodes[1] = { type: 5, min: 32, max: 33 };// TRG
  this.rules[11].opcodes[2] = { type: 5, min: 35, max: 38 };// TRG
  this.rules[11].opcodes[3] = { type: 5, min: 40, max: 91 };// TRG
  this.rules[11].opcodes[4] = { type: 5, min: 93, max: 55295 };// TRG
  this.rules[11].opcodes[5] = { type: 5, min: 57344, max: 1114111 };// TRG

  /* escapable */
  this.rules[12].opcodes = [];
  this.rules[12].opcodes[0] = { type: 1, children: [1,2,3,4,5,6,7,8] };// ALT
  this.rules[12].opcodes[1] = { type: 6, string: [98] };// TBS
  this.rules[12].opcodes[2] = { type: 6, string: [102] };// TBS
  this.rules[12].opcodes[3] = { type: 6, string: [110] };// TBS
  this.rules[12].opcodes[4] = { type: 6, string: [114] };// TBS
  this.rules[12].opcodes[5] = { type: 6, string: [116] };// TBS
  this.rules[12].opcodes[6] = { type: 7, string: [47] };// TLS
  this.rules[12].opcodes[7] = { type: 7, string: [92] };// TLS
  this.rules[12].opcodes[8] = { type: 2, children: [9,10] };// CAT
  this.rules[12].opcodes[9] = { type: 6, string: [117] };// TBS
  this.rules[12].opcodes[10] = { type: 4, index: 13 };// RNM(hexchar)

  /* hexchar */
  this.rules[13].opcodes = [];
  this.rules[13].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[13].opcodes[1] = { type: 4, index: 14 };// RNM(non-surrogate)
  this.rules[13].opcodes[2] = { type: 2, children: [3,4,5,6] };// CAT
  this.rules[13].opcodes[3] = { type: 4, index: 15 };// RNM(high-surrogate)
  this.rules[13].opcodes[4] = { type: 7, string: [92] };// TLS
  this.rules[13].opcodes[5] = { type: 6, string: [117] };// TBS
  this.rules[13].opcodes[6] = { type: 4, index: 16 };// RNM(low-surrogate)

  /* non-surrogate */
  this.rules[14].opcodes = [];
  this.rules[14].opcodes[0] = { type: 1, children: [1,11] };// ALT
  this.rules[14].opcodes[1] = { type: 2, children: [2,9] };// CAT
  this.rules[14].opcodes[2] = { type: 1, children: [3,4,5,6,7,8] };// ALT
  this.rules[14].opcodes[3] = { type: 4, index: 65 };// RNM(DIGIT)
  this.rules[14].opcodes[4] = { type: 7, string: [97] };// TLS
  this.rules[14].opcodes[5] = { type: 7, string: [98] };// TLS
  this.rules[14].opcodes[6] = { type: 7, string: [99] };// TLS
  this.rules[14].opcodes[7] = { type: 7, string: [101] };// TLS
  this.rules[14].opcodes[8] = { type: 7, string: [102] };// TLS
  this.rules[14].opcodes[9] = { type: 3, min: 3, max: 3 };// REP
  this.rules[14].opcodes[10] = { type: 4, index: 17 };// RNM(HEXDIG)
  this.rules[14].opcodes[11] = { type: 2, children: [12,13,14] };// CAT
  this.rules[14].opcodes[12] = { type: 7, string: [100] };// TLS
  this.rules[14].opcodes[13] = { type: 5, min: 48, max: 55 };// TRG
  this.rules[14].opcodes[14] = { type: 3, min: 2, max: 2 };// REP
  this.rules[14].opcodes[15] = { type: 4, index: 17 };// RNM(HEXDIG)

  /* high-surrogate */
  this.rules[15].opcodes = [];
  this.rules[15].opcodes[0] = { type: 2, children: [1,2,7] };// CAT
  this.rules[15].opcodes[1] = { type: 7, string: [100] };// TLS
  this.rules[15].opcodes[2] = { type: 1, children: [3,4,5,6] };// ALT
  this.rules[15].opcodes[3] = { type: 7, string: [56] };// TLS
  this.rules[15].opcodes[4] = { type: 7, string: [57] };// TLS
  this.rules[15].opcodes[5] = { type: 7, string: [97] };// TLS
  this.rules[15].opcodes[6] = { type: 7, string: [98] };// TLS
  this.rules[15].opcodes[7] = { type: 3, min: 2, max: 2 };// REP
  this.rules[15].opcodes[8] = { type: 4, index: 17 };// RNM(HEXDIG)

  /* low-surrogate */
  this.rules[16].opcodes = [];
  this.rules[16].opcodes[0] = { type: 2, children: [1,2,7] };// CAT
  this.rules[16].opcodes[1] = { type: 7, string: [100] };// TLS
  this.rules[16].opcodes[2] = { type: 1, children: [3,4,5,6] };// ALT
  this.rules[16].opcodes[3] = { type: 7, string: [99] };// TLS
  this.rules[16].opcodes[4] = { type: 7, string: [100] };// TLS
  this.rules[16].opcodes[5] = { type: 7, string: [101] };// TLS
  this.rules[16].opcodes[6] = { type: 7, string: [102] };// TLS
  this.rules[16].opcodes[7] = { type: 3, min: 2, max: 2 };// REP
  this.rules[16].opcodes[8] = { type: 4, index: 17 };// RNM(HEXDIG)

  /* HEXDIG */
  this.rules[17].opcodes = [];
  this.rules[17].opcodes[0] = { type: 1, children: [1,2,3,4,5,6,7] };// ALT
  this.rules[17].opcodes[1] = { type: 4, index: 65 };// RNM(DIGIT)
  this.rules[17].opcodes[2] = { type: 7, string: [97] };// TLS
  this.rules[17].opcodes[3] = { type: 7, string: [98] };// TLS
  this.rules[17].opcodes[4] = { type: 7, string: [99] };// TLS
  this.rules[17].opcodes[5] = { type: 7, string: [100] };// TLS
  this.rules[17].opcodes[6] = { type: 7, string: [101] };// TLS
  this.rules[17].opcodes[7] = { type: 7, string: [102] };// TLS

  /* wildcard-selector */
  this.rules[18].opcodes = [];
  this.rules[18].opcodes[0] = { type: 7, string: [42] };// TLS

  /* index-selector */
  this.rules[19].opcodes = [];
  this.rules[19].opcodes[0] = { type: 4, index: 20 };// RNM(int)

  /* int */
  this.rules[20].opcodes = [];
  this.rules[20].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[20].opcodes[1] = { type: 7, string: [48] };// TLS
  this.rules[20].opcodes[2] = { type: 2, children: [3,5,6] };// CAT
  this.rules[20].opcodes[3] = { type: 3, min: 0, max: 1 };// REP
  this.rules[20].opcodes[4] = { type: 7, string: [45] };// TLS
  this.rules[20].opcodes[5] = { type: 4, index: 21 };// RNM(DIGIT1)
  this.rules[20].opcodes[6] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[20].opcodes[7] = { type: 4, index: 65 };// RNM(DIGIT)

  /* DIGIT1 */
  this.rules[21].opcodes = [];
  this.rules[21].opcodes[0] = { type: 5, min: 49, max: 57 };// TRG

  /* slice-selector */
  this.rules[22].opcodes = [];
  this.rules[22].opcodes[0] = { type: 2, children: [1,5,6,7,11] };// CAT
  this.rules[22].opcodes[1] = { type: 3, min: 0, max: 1 };// REP
  this.rules[22].opcodes[2] = { type: 2, children: [3,4] };// CAT
  this.rules[22].opcodes[3] = { type: 4, index: 23 };// RNM(start)
  this.rules[22].opcodes[4] = { type: 4, index: 3 };// RNM(S)
  this.rules[22].opcodes[5] = { type: 4, index: 85 };// RNM(colon)
  this.rules[22].opcodes[6] = { type: 4, index: 3 };// RNM(S)
  this.rules[22].opcodes[7] = { type: 3, min: 0, max: 1 };// REP
  this.rules[22].opcodes[8] = { type: 2, children: [9,10] };// CAT
  this.rules[22].opcodes[9] = { type: 4, index: 24 };// RNM(end)
  this.rules[22].opcodes[10] = { type: 4, index: 3 };// RNM(S)
  this.rules[22].opcodes[11] = { type: 3, min: 0, max: 1 };// REP
  this.rules[22].opcodes[12] = { type: 2, children: [13,14] };// CAT
  this.rules[22].opcodes[13] = { type: 4, index: 85 };// RNM(colon)
  this.rules[22].opcodes[14] = { type: 3, min: 0, max: 1 };// REP
  this.rules[22].opcodes[15] = { type: 2, children: [16,17] };// CAT
  this.rules[22].opcodes[16] = { type: 4, index: 3 };// RNM(S)
  this.rules[22].opcodes[17] = { type: 4, index: 25 };// RNM(step)

  /* start */
  this.rules[23].opcodes = [];
  this.rules[23].opcodes[0] = { type: 4, index: 20 };// RNM(int)

  /* end */
  this.rules[24].opcodes = [];
  this.rules[24].opcodes[0] = { type: 4, index: 20 };// RNM(int)

  /* step */
  this.rules[25].opcodes = [];
  this.rules[25].opcodes[0] = { type: 4, index: 20 };// RNM(int)

  /* filter-selector */
  this.rules[26].opcodes = [];
  this.rules[26].opcodes[0] = { type: 2, children: [1,2,3] };// CAT
  this.rules[26].opcodes[1] = { type: 4, index: 88 };// RNM(questionmark)
  this.rules[26].opcodes[2] = { type: 4, index: 3 };// RNM(S)
  this.rules[26].opcodes[3] = { type: 4, index: 27 };// RNM(logical-expr)

  /* logical-expr */
  this.rules[27].opcodes = [];
  this.rules[27].opcodes[0] = { type: 4, index: 28 };// RNM(logical-or-expr)

  /* logical-or-expr */
  this.rules[28].opcodes = [];
  this.rules[28].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[28].opcodes[1] = { type: 4, index: 29 };// RNM(logical-and-expr)
  this.rules[28].opcodes[2] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[28].opcodes[3] = { type: 2, children: [4,5,6,7] };// CAT
  this.rules[28].opcodes[4] = { type: 4, index: 3 };// RNM(S)
  this.rules[28].opcodes[5] = { type: 4, index: 89 };// RNM(disjunction)
  this.rules[28].opcodes[6] = { type: 4, index: 3 };// RNM(S)
  this.rules[28].opcodes[7] = { type: 4, index: 29 };// RNM(logical-and-expr)

  /* logical-and-expr */
  this.rules[29].opcodes = [];
  this.rules[29].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[29].opcodes[1] = { type: 4, index: 30 };// RNM(basic-expr)
  this.rules[29].opcodes[2] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[29].opcodes[3] = { type: 2, children: [4,5,6,7] };// CAT
  this.rules[29].opcodes[4] = { type: 4, index: 3 };// RNM(S)
  this.rules[29].opcodes[5] = { type: 4, index: 90 };// RNM(conjunction)
  this.rules[29].opcodes[6] = { type: 4, index: 3 };// RNM(S)
  this.rules[29].opcodes[7] = { type: 4, index: 30 };// RNM(basic-expr)

  /* basic-expr */
  this.rules[30].opcodes = [];
  this.rules[30].opcodes[0] = { type: 1, children: [1,2,3] };// ALT
  this.rules[30].opcodes[1] = { type: 4, index: 31 };// RNM(paren-expr)
  this.rules[30].opcodes[2] = { type: 4, index: 37 };// RNM(comparison-expr)
  this.rules[30].opcodes[3] = { type: 4, index: 33 };// RNM(test-expr)

  /* paren-expr */
  this.rules[31].opcodes = [];
  this.rules[31].opcodes[0] = { type: 2, children: [1,5,6,7,8,9] };// CAT
  this.rules[31].opcodes[1] = { type: 3, min: 0, max: 1 };// REP
  this.rules[31].opcodes[2] = { type: 2, children: [3,4] };// CAT
  this.rules[31].opcodes[3] = { type: 4, index: 32 };// RNM(logical-not-op)
  this.rules[31].opcodes[4] = { type: 4, index: 3 };// RNM(S)
  this.rules[31].opcodes[5] = { type: 4, index: 82 };// RNM(left-paren)
  this.rules[31].opcodes[6] = { type: 4, index: 3 };// RNM(S)
  this.rules[31].opcodes[7] = { type: 4, index: 27 };// RNM(logical-expr)
  this.rules[31].opcodes[8] = { type: 4, index: 3 };// RNM(S)
  this.rules[31].opcodes[9] = { type: 4, index: 83 };// RNM(right-paren)

  /* logical-not-op */
  this.rules[32].opcodes = [];
  this.rules[32].opcodes[0] = { type: 7, string: [33] };// TLS

  /* test-expr */
  this.rules[33].opcodes = [];
  this.rules[33].opcodes[0] = { type: 2, children: [1,5] };// CAT
  this.rules[33].opcodes[1] = { type: 3, min: 0, max: 1 };// REP
  this.rules[33].opcodes[2] = { type: 2, children: [3,4] };// CAT
  this.rules[33].opcodes[3] = { type: 4, index: 32 };// RNM(logical-not-op)
  this.rules[33].opcodes[4] = { type: 4, index: 3 };// RNM(S)
  this.rules[33].opcodes[5] = { type: 1, children: [6,7] };// ALT
  this.rules[33].opcodes[6] = { type: 4, index: 34 };// RNM(filter-query)
  this.rules[33].opcodes[7] = { type: 4, index: 57 };// RNM(function-expr)

  /* filter-query */
  this.rules[34].opcodes = [];
  this.rules[34].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[34].opcodes[1] = { type: 4, index: 35 };// RNM(rel-query)
  this.rules[34].opcodes[2] = { type: 4, index: 0 };// RNM(jsonpath-query)

  /* rel-query */
  this.rules[35].opcodes = [];
  this.rules[35].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[35].opcodes[1] = { type: 4, index: 36 };// RNM(current-node-identifier)
  this.rules[35].opcodes[2] = { type: 4, index: 1 };// RNM(segments)

  /* current-node-identifier */
  this.rules[36].opcodes = [];
  this.rules[36].opcodes[0] = { type: 7, string: [64] };// TLS

  /* comparison-expr */
  this.rules[37].opcodes = [];
  this.rules[37].opcodes[0] = { type: 2, children: [1,2,3,4,5] };// CAT
  this.rules[37].opcodes[1] = { type: 4, index: 39 };// RNM(comparable)
  this.rules[37].opcodes[2] = { type: 4, index: 3 };// RNM(S)
  this.rules[37].opcodes[3] = { type: 4, index: 40 };// RNM(comparison-op)
  this.rules[37].opcodes[4] = { type: 4, index: 3 };// RNM(S)
  this.rules[37].opcodes[5] = { type: 4, index: 39 };// RNM(comparable)

  /* literal */
  this.rules[38].opcodes = [];
  this.rules[38].opcodes[0] = { type: 1, children: [1,2,3,4,5] };// ALT
  this.rules[38].opcodes[1] = { type: 4, index: 47 };// RNM(number)
  this.rules[38].opcodes[2] = { type: 4, index: 7 };// RNM(string-literal)
  this.rules[38].opcodes[3] = { type: 4, index: 50 };// RNM(true)
  this.rules[38].opcodes[4] = { type: 4, index: 51 };// RNM(false)
  this.rules[38].opcodes[5] = { type: 4, index: 52 };// RNM(null)

  /* comparable */
  this.rules[39].opcodes = [];
  this.rules[39].opcodes[0] = { type: 1, children: [1,2,3] };// ALT
  this.rules[39].opcodes[1] = { type: 4, index: 41 };// RNM(singular-query)
  this.rules[39].opcodes[2] = { type: 4, index: 57 };// RNM(function-expr)
  this.rules[39].opcodes[3] = { type: 4, index: 38 };// RNM(literal)

  /* comparison-op */
  this.rules[40].opcodes = [];
  this.rules[40].opcodes[0] = { type: 1, children: [1,2,3,4,5,6] };// ALT
  this.rules[40].opcodes[1] = { type: 7, string: [61,61] };// TLS
  this.rules[40].opcodes[2] = { type: 7, string: [33,61] };// TLS
  this.rules[40].opcodes[3] = { type: 7, string: [60,61] };// TLS
  this.rules[40].opcodes[4] = { type: 7, string: [62,61] };// TLS
  this.rules[40].opcodes[5] = { type: 7, string: [60] };// TLS
  this.rules[40].opcodes[6] = { type: 7, string: [62] };// TLS

  /* singular-query */
  this.rules[41].opcodes = [];
  this.rules[41].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[41].opcodes[1] = { type: 4, index: 42 };// RNM(rel-singular-query)
  this.rules[41].opcodes[2] = { type: 4, index: 43 };// RNM(abs-singular-query)

  /* rel-singular-query */
  this.rules[42].opcodes = [];
  this.rules[42].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[42].opcodes[1] = { type: 4, index: 36 };// RNM(current-node-identifier)
  this.rules[42].opcodes[2] = { type: 4, index: 44 };// RNM(singular-query-segments)

  /* abs-singular-query */
  this.rules[43].opcodes = [];
  this.rules[43].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[43].opcodes[1] = { type: 4, index: 4 };// RNM(root-identifier)
  this.rules[43].opcodes[2] = { type: 4, index: 44 };// RNM(singular-query-segments)

  /* singular-query-segments */
  this.rules[44].opcodes = [];
  this.rules[44].opcodes[0] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[44].opcodes[1] = { type: 2, children: [2,3] };// CAT
  this.rules[44].opcodes[2] = { type: 4, index: 3 };// RNM(S)
  this.rules[44].opcodes[3] = { type: 1, children: [4,5] };// ALT
  this.rules[44].opcodes[4] = { type: 4, index: 45 };// RNM(name-segment)
  this.rules[44].opcodes[5] = { type: 4, index: 46 };// RNM(index-segment)

  /* name-segment */
  this.rules[45].opcodes = [];
  this.rules[45].opcodes[0] = { type: 1, children: [1,5] };// ALT
  this.rules[45].opcodes[1] = { type: 2, children: [2,3,4] };// CAT
  this.rules[45].opcodes[2] = { type: 4, index: 80 };// RNM(left-bracket)
  this.rules[45].opcodes[3] = { type: 4, index: 6 };// RNM(name-selector)
  this.rules[45].opcodes[4] = { type: 4, index: 81 };// RNM(right-bracket)
  this.rules[45].opcodes[5] = { type: 2, children: [6,7] };// CAT
  this.rules[45].opcodes[6] = { type: 4, index: 78 };// RNM(dot-prefix)
  this.rules[45].opcodes[7] = { type: 4, index: 62 };// RNM(member-name-shorthand)

  /* index-segment */
  this.rules[46].opcodes = [];
  this.rules[46].opcodes[0] = { type: 2, children: [1,2,3] };// CAT
  this.rules[46].opcodes[1] = { type: 4, index: 80 };// RNM(left-bracket)
  this.rules[46].opcodes[2] = { type: 4, index: 19 };// RNM(index-selector)
  this.rules[46].opcodes[3] = { type: 4, index: 81 };// RNM(right-bracket)

  /* number */
  this.rules[47].opcodes = [];
  this.rules[47].opcodes[0] = { type: 2, children: [1,4,6] };// CAT
  this.rules[47].opcodes[1] = { type: 1, children: [2,3] };// ALT
  this.rules[47].opcodes[2] = { type: 4, index: 20 };// RNM(int)
  this.rules[47].opcodes[3] = { type: 7, string: [45,48] };// TLS
  this.rules[47].opcodes[4] = { type: 3, min: 0, max: 1 };// REP
  this.rules[47].opcodes[5] = { type: 4, index: 48 };// RNM(frac)
  this.rules[47].opcodes[6] = { type: 3, min: 0, max: 1 };// REP
  this.rules[47].opcodes[7] = { type: 4, index: 49 };// RNM(exp)

  /* frac */
  this.rules[48].opcodes = [];
  this.rules[48].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[48].opcodes[1] = { type: 7, string: [46] };// TLS
  this.rules[48].opcodes[2] = { type: 3, min: 1, max: Infinity };// REP
  this.rules[48].opcodes[3] = { type: 4, index: 65 };// RNM(DIGIT)

  /* exp */
  this.rules[49].opcodes = [];
  this.rules[49].opcodes[0] = { type: 2, children: [1,2,6] };// CAT
  this.rules[49].opcodes[1] = { type: 7, string: [101] };// TLS
  this.rules[49].opcodes[2] = { type: 3, min: 0, max: 1 };// REP
  this.rules[49].opcodes[3] = { type: 1, children: [4,5] };// ALT
  this.rules[49].opcodes[4] = { type: 7, string: [45] };// TLS
  this.rules[49].opcodes[5] = { type: 7, string: [43] };// TLS
  this.rules[49].opcodes[6] = { type: 3, min: 1, max: Infinity };// REP
  this.rules[49].opcodes[7] = { type: 4, index: 65 };// RNM(DIGIT)

  /* true */
  this.rules[50].opcodes = [];
  this.rules[50].opcodes[0] = { type: 6, string: [116,114,117,101] };// TBS

  /* false */
  this.rules[51].opcodes = [];
  this.rules[51].opcodes[0] = { type: 6, string: [102,97,108,115,101] };// TBS

  /* null */
  this.rules[52].opcodes = [];
  this.rules[52].opcodes[0] = { type: 6, string: [110,117,108,108] };// TBS

  /* function-name */
  this.rules[53].opcodes = [];
  this.rules[53].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[53].opcodes[1] = { type: 4, index: 54 };// RNM(function-name-first)
  this.rules[53].opcodes[2] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[53].opcodes[3] = { type: 4, index: 55 };// RNM(function-name-char)

  /* function-name-first */
  this.rules[54].opcodes = [];
  this.rules[54].opcodes[0] = { type: 4, index: 56 };// RNM(LCALPHA)

  /* function-name-char */
  this.rules[55].opcodes = [];
  this.rules[55].opcodes[0] = { type: 1, children: [1,2,3] };// ALT
  this.rules[55].opcodes[1] = { type: 4, index: 54 };// RNM(function-name-first)
  this.rules[55].opcodes[2] = { type: 7, string: [95] };// TLS
  this.rules[55].opcodes[3] = { type: 4, index: 65 };// RNM(DIGIT)

  /* LCALPHA */
  this.rules[56].opcodes = [];
  this.rules[56].opcodes[0] = { type: 5, min: 97, max: 122 };// TRG

  /* function-expr */
  this.rules[57].opcodes = [];
  this.rules[57].opcodes[0] = { type: 2, children: [1,2,3,4,13,14] };// CAT
  this.rules[57].opcodes[1] = { type: 4, index: 53 };// RNM(function-name)
  this.rules[57].opcodes[2] = { type: 4, index: 82 };// RNM(left-paren)
  this.rules[57].opcodes[3] = { type: 4, index: 3 };// RNM(S)
  this.rules[57].opcodes[4] = { type: 3, min: 0, max: 1 };// REP
  this.rules[57].opcodes[5] = { type: 2, children: [6,7] };// CAT
  this.rules[57].opcodes[6] = { type: 4, index: 58 };// RNM(function-argument)
  this.rules[57].opcodes[7] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[57].opcodes[8] = { type: 2, children: [9,10,11,12] };// CAT
  this.rules[57].opcodes[9] = { type: 4, index: 3 };// RNM(S)
  this.rules[57].opcodes[10] = { type: 4, index: 84 };// RNM(comma)
  this.rules[57].opcodes[11] = { type: 4, index: 3 };// RNM(S)
  this.rules[57].opcodes[12] = { type: 4, index: 58 };// RNM(function-argument)
  this.rules[57].opcodes[13] = { type: 4, index: 3 };// RNM(S)
  this.rules[57].opcodes[14] = { type: 4, index: 83 };// RNM(right-paren)

  /* function-argument */
  this.rules[58].opcodes = [];
  this.rules[58].opcodes[0] = { type: 1, children: [1,2,3,4] };// ALT
  this.rules[58].opcodes[1] = { type: 4, index: 27 };// RNM(logical-expr)
  this.rules[58].opcodes[2] = { type: 4, index: 57 };// RNM(function-expr)
  this.rules[58].opcodes[3] = { type: 4, index: 34 };// RNM(filter-query)
  this.rules[58].opcodes[4] = { type: 4, index: 38 };// RNM(literal)

  /* segment */
  this.rules[59].opcodes = [];
  this.rules[59].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[59].opcodes[1] = { type: 4, index: 60 };// RNM(child-segment)
  this.rules[59].opcodes[2] = { type: 4, index: 67 };// RNM(descendant-segment)

  /* child-segment */
  this.rules[60].opcodes = [];
  this.rules[60].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[60].opcodes[1] = { type: 4, index: 61 };// RNM(bracketed-selection)
  this.rules[60].opcodes[2] = { type: 2, children: [3,4] };// CAT
  this.rules[60].opcodes[3] = { type: 4, index: 78 };// RNM(dot-prefix)
  this.rules[60].opcodes[4] = { type: 1, children: [5,6] };// ALT
  this.rules[60].opcodes[5] = { type: 4, index: 18 };// RNM(wildcard-selector)
  this.rules[60].opcodes[6] = { type: 4, index: 62 };// RNM(member-name-shorthand)

  /* bracketed-selection */
  this.rules[61].opcodes = [];
  this.rules[61].opcodes[0] = { type: 2, children: [1,2,3,4,10,11] };// CAT
  this.rules[61].opcodes[1] = { type: 4, index: 80 };// RNM(left-bracket)
  this.rules[61].opcodes[2] = { type: 4, index: 3 };// RNM(S)
  this.rules[61].opcodes[3] = { type: 4, index: 5 };// RNM(selector)
  this.rules[61].opcodes[4] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[61].opcodes[5] = { type: 2, children: [6,7,8,9] };// CAT
  this.rules[61].opcodes[6] = { type: 4, index: 3 };// RNM(S)
  this.rules[61].opcodes[7] = { type: 4, index: 84 };// RNM(comma)
  this.rules[61].opcodes[8] = { type: 4, index: 3 };// RNM(S)
  this.rules[61].opcodes[9] = { type: 4, index: 5 };// RNM(selector)
  this.rules[61].opcodes[10] = { type: 4, index: 3 };// RNM(S)
  this.rules[61].opcodes[11] = { type: 4, index: 81 };// RNM(right-bracket)

  /* member-name-shorthand */
  this.rules[62].opcodes = [];
  this.rules[62].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[62].opcodes[1] = { type: 4, index: 63 };// RNM(name-first)
  this.rules[62].opcodes[2] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[62].opcodes[3] = { type: 4, index: 64 };// RNM(name-char)

  /* name-first */
  this.rules[63].opcodes = [];
  this.rules[63].opcodes[0] = { type: 1, children: [1,2,3,4] };// ALT
  this.rules[63].opcodes[1] = { type: 4, index: 66 };// RNM(ALPHA)
  this.rules[63].opcodes[2] = { type: 7, string: [95] };// TLS
  this.rules[63].opcodes[3] = { type: 5, min: 128, max: 55295 };// TRG
  this.rules[63].opcodes[4] = { type: 5, min: 57344, max: 1114111 };// TRG

  /* name-char */
  this.rules[64].opcodes = [];
  this.rules[64].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[64].opcodes[1] = { type: 4, index: 63 };// RNM(name-first)
  this.rules[64].opcodes[2] = { type: 4, index: 65 };// RNM(DIGIT)

  /* DIGIT */
  this.rules[65].opcodes = [];
  this.rules[65].opcodes[0] = { type: 5, min: 48, max: 57 };// TRG

  /* ALPHA */
  this.rules[66].opcodes = [];
  this.rules[66].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[66].opcodes[1] = { type: 5, min: 65, max: 90 };// TRG
  this.rules[66].opcodes[2] = { type: 5, min: 97, max: 122 };// TRG

  /* descendant-segment */
  this.rules[67].opcodes = [];
  this.rules[67].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[67].opcodes[1] = { type: 4, index: 79 };// RNM(double-dot-prefix)
  this.rules[67].opcodes[2] = { type: 1, children: [3,4,5] };// ALT
  this.rules[67].opcodes[3] = { type: 4, index: 61 };// RNM(bracketed-selection)
  this.rules[67].opcodes[4] = { type: 4, index: 18 };// RNM(wildcard-selector)
  this.rules[67].opcodes[5] = { type: 4, index: 62 };// RNM(member-name-shorthand)

  /* normalized-path */
  this.rules[68].opcodes = [];
  this.rules[68].opcodes[0] = { type: 2, children: [1,2] };// CAT
  this.rules[68].opcodes[1] = { type: 4, index: 4 };// RNM(root-identifier)
  this.rules[68].opcodes[2] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[68].opcodes[3] = { type: 4, index: 69 };// RNM(normal-index-segment)

  /* normal-index-segment */
  this.rules[69].opcodes = [];
  this.rules[69].opcodes[0] = { type: 2, children: [1,2,3] };// CAT
  this.rules[69].opcodes[1] = { type: 7, string: [91] };// TLS
  this.rules[69].opcodes[2] = { type: 4, index: 70 };// RNM(normal-selector)
  this.rules[69].opcodes[3] = { type: 7, string: [93] };// TLS

  /* normal-selector */
  this.rules[70].opcodes = [];
  this.rules[70].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[70].opcodes[1] = { type: 4, index: 71 };// RNM(normal-name-selector)
  this.rules[70].opcodes[2] = { type: 4, index: 77 };// RNM(normal-index-selector)

  /* normal-name-selector */
  this.rules[71].opcodes = [];
  this.rules[71].opcodes[0] = { type: 2, children: [1,2,4] };// CAT
  this.rules[71].opcodes[1] = { type: 6, string: [39] };// TBS
  this.rules[71].opcodes[2] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[71].opcodes[3] = { type: 4, index: 72 };// RNM(normal-single-quoted)
  this.rules[71].opcodes[4] = { type: 6, string: [39] };// TBS

  /* normal-single-quoted */
  this.rules[72].opcodes = [];
  this.rules[72].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[72].opcodes[1] = { type: 4, index: 73 };// RNM(normal-unescaped)
  this.rules[72].opcodes[2] = { type: 2, children: [3,4] };// CAT
  this.rules[72].opcodes[3] = { type: 4, index: 10 };// RNM(ESC)
  this.rules[72].opcodes[4] = { type: 4, index: 74 };// RNM(normal-escapable)

  /* normal-unescaped */
  this.rules[73].opcodes = [];
  this.rules[73].opcodes[0] = { type: 1, children: [1,2,3,4] };// ALT
  this.rules[73].opcodes[1] = { type: 5, min: 32, max: 38 };// TRG
  this.rules[73].opcodes[2] = { type: 5, min: 40, max: 91 };// TRG
  this.rules[73].opcodes[3] = { type: 5, min: 93, max: 55295 };// TRG
  this.rules[73].opcodes[4] = { type: 5, min: 57344, max: 1114111 };// TRG

  /* normal-escapable */
  this.rules[74].opcodes = [];
  this.rules[74].opcodes[0] = { type: 1, children: [1,2,3,4,5,6,7,8] };// ALT
  this.rules[74].opcodes[1] = { type: 6, string: [98] };// TBS
  this.rules[74].opcodes[2] = { type: 6, string: [102] };// TBS
  this.rules[74].opcodes[3] = { type: 6, string: [110] };// TBS
  this.rules[74].opcodes[4] = { type: 6, string: [114] };// TBS
  this.rules[74].opcodes[5] = { type: 6, string: [116] };// TBS
  this.rules[74].opcodes[6] = { type: 7, string: [39] };// TLS
  this.rules[74].opcodes[7] = { type: 7, string: [92] };// TLS
  this.rules[74].opcodes[8] = { type: 2, children: [9,10] };// CAT
  this.rules[74].opcodes[9] = { type: 6, string: [117] };// TBS
  this.rules[74].opcodes[10] = { type: 4, index: 75 };// RNM(normal-hexchar)

  /* normal-hexchar */
  this.rules[75].opcodes = [];
  this.rules[75].opcodes[0] = { type: 2, children: [1,2,3] };// CAT
  this.rules[75].opcodes[1] = { type: 7, string: [48] };// TLS
  this.rules[75].opcodes[2] = { type: 7, string: [48] };// TLS
  this.rules[75].opcodes[3] = { type: 1, children: [4,7,10,13] };// ALT
  this.rules[75].opcodes[4] = { type: 2, children: [5,6] };// CAT
  this.rules[75].opcodes[5] = { type: 7, string: [48] };// TLS
  this.rules[75].opcodes[6] = { type: 5, min: 48, max: 55 };// TRG
  this.rules[75].opcodes[7] = { type: 2, children: [8,9] };// CAT
  this.rules[75].opcodes[8] = { type: 7, string: [48] };// TLS
  this.rules[75].opcodes[9] = { type: 6, string: [98] };// TBS
  this.rules[75].opcodes[10] = { type: 2, children: [11,12] };// CAT
  this.rules[75].opcodes[11] = { type: 7, string: [48] };// TLS
  this.rules[75].opcodes[12] = { type: 5, min: 101, max: 102 };// TRG
  this.rules[75].opcodes[13] = { type: 2, children: [14,15] };// CAT
  this.rules[75].opcodes[14] = { type: 7, string: [49] };// TLS
  this.rules[75].opcodes[15] = { type: 4, index: 76 };// RNM(normal-HEXDIG)

  /* normal-HEXDIG */
  this.rules[76].opcodes = [];
  this.rules[76].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[76].opcodes[1] = { type: 4, index: 65 };// RNM(DIGIT)
  this.rules[76].opcodes[2] = { type: 5, min: 97, max: 102 };// TRG

  /* normal-index-selector */
  this.rules[77].opcodes = [];
  this.rules[77].opcodes[0] = { type: 1, children: [1,2] };// ALT
  this.rules[77].opcodes[1] = { type: 7, string: [48] };// TLS
  this.rules[77].opcodes[2] = { type: 2, children: [3,4] };// CAT
  this.rules[77].opcodes[3] = { type: 4, index: 21 };// RNM(DIGIT1)
  this.rules[77].opcodes[4] = { type: 3, min: 0, max: Infinity };// REP
  this.rules[77].opcodes[5] = { type: 4, index: 65 };// RNM(DIGIT)

  /* dot-prefix */
  this.rules[78].opcodes = [];
  this.rules[78].opcodes[0] = { type: 7, string: [46] };// TLS

  /* double-dot-prefix */
  this.rules[79].opcodes = [];
  this.rules[79].opcodes[0] = { type: 7, string: [46,46] };// TLS

  /* left-bracket */
  this.rules[80].opcodes = [];
  this.rules[80].opcodes[0] = { type: 7, string: [91] };// TLS

  /* right-bracket */
  this.rules[81].opcodes = [];
  this.rules[81].opcodes[0] = { type: 7, string: [93] };// TLS

  /* left-paren */
  this.rules[82].opcodes = [];
  this.rules[82].opcodes[0] = { type: 7, string: [40] };// TLS

  /* right-paren */
  this.rules[83].opcodes = [];
  this.rules[83].opcodes[0] = { type: 7, string: [41] };// TLS

  /* comma */
  this.rules[84].opcodes = [];
  this.rules[84].opcodes[0] = { type: 7, string: [44] };// TLS

  /* colon */
  this.rules[85].opcodes = [];
  this.rules[85].opcodes[0] = { type: 7, string: [58] };// TLS

  /* dquote */
  this.rules[86].opcodes = [];
  this.rules[86].opcodes[0] = { type: 6, string: [34] };// TBS

  /* squote */
  this.rules[87].opcodes = [];
  this.rules[87].opcodes[0] = { type: 6, string: [39] };// TBS

  /* questionmark */
  this.rules[88].opcodes = [];
  this.rules[88].opcodes[0] = { type: 7, string: [63] };// TLS

  /* disjunction */
  this.rules[89].opcodes = [];
  this.rules[89].opcodes[0] = { type: 7, string: [124,124] };// TLS

  /* conjunction */
  this.rules[90].opcodes = [];
  this.rules[90].opcodes[0] = { type: 7, string: [38,38] };// TLS

  // The `toString()` function will display the original grammar file(s) that produced these opcodes.
  this.toString = function toString(){
    let str = "";
    str += "; JSONPath: Query Expressions for JSON\n";
    str += "; https://www.rfc-editor.org/rfc/rfc9535\n";
    str += "\n";
    str += "; https://www.rfc-editor.org/rfc/rfc9535#section-2.1.1\n";
    str += "jsonpath-query      = root-identifier segments\n";
    str += "segments            = *(S segment)\n";
    str += "\n";
    str += "B                   = %x20 /    ; Space\n";
    str += "                      %x09 /    ; Horizontal tab\n";
    str += "                      %x0A /    ; Line feed or New line\n";
    str += "                      %x0D      ; Carriage return\n";
    str += "S                   = *B        ; optional blank space\n";
    str += "\n";
    str += "; https://www.rfc-editor.org/rfc/rfc9535#section-2.2.1\n";
    str += "root-identifier     = \"$\"\n";
    str += "\n";
    str += "; https://www.rfc-editor.org/rfc/rfc9535#section-2.3\n";
    str += "selector            = name-selector /\n";
    str += "                      wildcard-selector /\n";
    str += "                      slice-selector /\n";
    str += "                      index-selector /\n";
    str += "                      filter-selector\n";
    str += "\n";
    str += "; https://www.rfc-editor.org/rfc/rfc9535#section-2.3.1.1\n";
    str += "name-selector       = string-literal\n";
    str += "\n";
    str += "string-literal      = dquote *double-quoted dquote /     ; \"string\", MODIFICATION: surrogate text rule used\n";
    str += "                      squote *single-quoted squote      ; 'string', MODIFICATION: surrogate text rule used\n";
    str += "\n";
    str += "double-quoted       = unescaped /\n";
    str += "                      %x27      /                    ; '\n";
    str += "                      ESC %x22  /                    ; \\\"\n";
    str += "                      ESC escapable\n";
    str += "\n";
    str += "single-quoted       = unescaped /\n";
    str += "                      %x22      /                    ; \"\n";
    str += "                      ESC %x27  /                    ; \\'\n";
    str += "                      ESC escapable\n";
    str += "\n";
    str += "ESC                 = %x5C                           ; \\ backslash\n";
    str += "\n";
    str += "unescaped           = %x20-21 /                      ; see RFC 8259\n";
    str += "                         ; omit 0x22 \"\n";
    str += "                      %x23-26 /\n";
    str += "                         ; omit 0x27 '\n";
    str += "                      %x28-5B /\n";
    str += "                         ; omit 0x5C \\\n";
    str += "                      %x5D-D7FF /\n";
    str += "                         ; skip surrogate code points\n";
    str += "                      %xE000-10FFFF\n";
    str += "\n";
    str += "escapable           = %x62 / ; b BS backspace U+0008\n";
    str += "                      %x66 / ; f FF form feed U+000C\n";
    str += "                      %x6E / ; n LF line feed U+000A\n";
    str += "                      %x72 / ; r CR carriage return U+000D\n";
    str += "                      %x74 / ; t HT horizontal tab U+0009\n";
    str += "                      \"/\"  / ; / slash (solidus) U+002F\n";
    str += "                      \"\\\"  / ; \\ backslash (reverse solidus) U+005C\n";
    str += "                      (%x75 hexchar) ;  uXXXX U+XXXX\n";
    str += "\n";
    str += "hexchar             = non-surrogate /\n";
    str += "                      (high-surrogate \"\\\" %x75 low-surrogate)\n";
    str += "non-surrogate       = ((DIGIT / \"A\"/\"B\"/\"C\" / \"E\"/\"F\") 3HEXDIG) /\n";
    str += "                      (\"D\" %x30-37 2HEXDIG )\n";
    str += "high-surrogate      = \"D\" (\"8\"/\"9\"/\"A\"/\"B\") 2HEXDIG\n";
    str += "low-surrogate       = \"D\" (\"C\"/\"D\"/\"E\"/\"F\") 2HEXDIG\n";
    str += "\n";
    str += "HEXDIG              = DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n";
    str += "\n";
    str += "; https://www.rfc-editor.org/rfc/rfc9535#section-2.3.2.1\n";
    str += "wildcard-selector   = \"*\"\n";
    str += "\n";
    str += "; https://www.rfc-editor.org/rfc/rfc9535#section-2.3.3.1\n";
    str += "index-selector      = int                        ; decimal integer\n";
    str += "\n";
    str += "int                 = \"0\" /\n";
    str += "                      ([\"-\"] DIGIT1 *DIGIT)      ; - optional\n";
    str += "DIGIT1              = %x31-39                    ; 1-9 non-zero digit\n";
    str += "\n";
    str += "; https://www.rfc-editor.org/rfc/rfc9535#section-2.3.4.1\n";
    str += "slice-selector      = [start S] colon S [end S] [colon [S step ]] ; MODIFICATION: surrogate text rule used\n";
    str += "\n";
    str += "start               = int       ; included in selection\n";
    str += "end                 = int       ; not included in selection\n";
    str += "step                = int       ; default: 1\n";
    str += "\n";
    str += "; https://www.rfc-editor.org/rfc/rfc9535#section-2.3.5.1\n";
    str += "filter-selector     = questionmark S logical-expr ; MODIFICATION: surrogate text rule used\n";
    str += "\n";
    str += "logical-expr        = logical-or-expr\n";
    str += "logical-or-expr     = logical-and-expr *(S disjunction S logical-and-expr) ; MODIFICATION: surrogate text rule used\n";
    str += "                        ; disjunction\n";
    str += "                        ; binds less tightly than conjunction\n";
    str += "logical-and-expr    = basic-expr *(S conjunction S basic-expr) ; MODIFICATION: surrogate text rule used\n";
    str += "                        ; conjunction\n";
    str += "                        ; binds more tightly than disjunction\n";
    str += "\n";
    str += "basic-expr          = paren-expr /\n";
    str += "                      comparison-expr /\n";
    str += "                      test-expr\n";
    str += "\n";
    str += "paren-expr          = [logical-not-op S] left-paren S logical-expr S right-paren ; MODIFICATION: surrogate text rule used\n";
    str += "                                        ; parenthesized expression\n";
    str += "logical-not-op      = \"!\"               ; logical NOT operator\n";
    str += "\n";
    str += "test-expr           = [logical-not-op S]\n";
    str += "                      (filter-query / ; existence/non-existence\n";
    str += "                       function-expr) ; LogicalType or NodesType\n";
    str += "filter-query        = rel-query / jsonpath-query\n";
    str += "rel-query           = current-node-identifier segments\n";
    str += "current-node-identifier = \"@\"\n";
    str += "\n";
    str += "comparison-expr     = comparable S comparison-op S comparable\n";
    str += "literal             = number / string-literal /\n";
    str += "                      true / false / null\n";
    str += "comparable          = singular-query / ; singular query value\n";
    str += "                      function-expr /  ; ValueType\n";
    str += "                      literal\n";
    str += "                      ; MODIFICATION: https://www.rfc-editor.org/errata/eid8343\n";
    str += "comparison-op       = \"==\" / \"!=\" /\n";
    str += "                      \"<=\" / \">=\" /\n";
    str += "                      \"<\"  / \">\"\n";
    str += "\n";
    str += "singular-query      = rel-singular-query / abs-singular-query\n";
    str += "rel-singular-query  = current-node-identifier singular-query-segments\n";
    str += "abs-singular-query  = root-identifier singular-query-segments\n";
    str += "singular-query-segments = *(S (name-segment / index-segment))\n";
    str += "name-segment        = (left-bracket name-selector right-bracket) / ; MODIFICATION: surrogate text rule used\n";
    str += "                      (dot-prefix member-name-shorthand) ; MODIFICATION: surrogate text rule used\n";
    str += "index-segment       = left-bracket index-selector right-bracket ; MODIFICATION: surrogate text rule used\n";
    str += "\n";
    str += "number              = (int / \"-0\") [ frac ] [ exp ] ; decimal number\n";
    str += "frac                = \".\" 1*DIGIT                  ; decimal fraction\n";
    str += "exp                 = \"e\" [ \"-\" / \"+\" ] 1*DIGIT    ; decimal exponent\n";
    str += "true                = %x74.72.75.65                ; true\n";
    str += "false               = %x66.61.6c.73.65             ; false\n";
    str += "null                = %x6e.75.6c.6c                ; null\n";
    str += "\n";
    str += "; https://www.rfc-editor.org/rfc/rfc9535#section-2.4\n";
    str += "function-name       = function-name-first *function-name-char\n";
    str += "function-name-first = LCALPHA\n";
    str += "function-name-char  = function-name-first / \"_\" / DIGIT\n";
    str += "LCALPHA             = %x61-7A  ; \"a\"..\"z\"\n";
    str += "\n";
    str += "function-expr       = function-name left-paren S [function-argument ; MODIFICATION: surrogate text rule used\n";
    str += "                         *(S comma S function-argument)] S right-paren ; MODIFICATION: surrogate text rule used\n";
    str += "function-argument   = logical-expr / ; MODIFICATION: https://www.rfc-editor.org/errata/eid8343\n";
    str += "                      function-expr /\n";
    str += "                      filter-query / ; (includes singular-query)\n";
    str += "                      literal\n";
    str += "\n";
    str += "\n";
    str += "; https://www.rfc-editor.org/rfc/rfc9535#section-2.5\n";
    str += "segment             = child-segment / descendant-segment\n";
    str += "\n";
    str += "; https://www.rfc-editor.org/rfc/rfc9535#section-2.5.1.1\n";
    str += "child-segment       = bracketed-selection /\n";
    str += "                      (dot-prefix ; MODIFICATION: surrogate text rule used\n";
    str += "                       (wildcard-selector /\n";
    str += "                        member-name-shorthand))\n";
    str += "\n";
    str += "bracketed-selection = left-bracket S selector *(S comma S selector) S right-bracket\n";
    str += "                    ; MODIFICATION: surrogate text rule used\n";
    str += "\n";
    str += "member-name-shorthand = name-first *name-char\n";
    str += "name-first          = ALPHA /\n";
    str += "                      \"_\"   /\n";
    str += "                      %x80-D7FF /\n";
    str += "                         ; skip surrogate code points\n";
    str += "                      %xE000-10FFFF\n";
    str += "name-char           = name-first / DIGIT\n";
    str += "\n";
    str += "DIGIT               = %x30-39              ; 0-9\n";
    str += "ALPHA               = %x41-5A / %x61-7A    ; A-Z / a-z\n";
    str += "\n";
    str += "; https://www.rfc-editor.org/rfc/rfc9535#section-2.5.2.1\n";
    str += "descendant-segment  = double-dot-prefix (bracketed-selection / ; MODIFICATION: surrogate text rule used\n";
    str += "                                         wildcard-selector /\n";
    str += "                                         member-name-shorthand)\n";
    str += "\n";
    str += "; https://www.rfc-editor.org/rfc/rfc9535#name-normalized-paths\n";
    str += "normalized-path      = root-identifier *(normal-index-segment)\n";
    str += "normal-index-segment = \"[\" normal-selector \"]\"\n";
    str += "normal-selector      = normal-name-selector / normal-index-selector\n";
    str += "normal-name-selector = %x27 *normal-single-quoted %x27 ; 'string'\n";
    str += "normal-single-quoted = normal-unescaped /\n";
    str += "                       ESC normal-escapable\n";
    str += "normal-unescaped     =    ; omit %x0-1F control codes\n";
    str += "                       %x20-26 /\n";
    str += "                          ; omit 0x27 '\n";
    str += "                       %x28-5B /\n";
    str += "                          ; omit 0x5C \\\n";
    str += "                       %x5D-D7FF /\n";
    str += "                          ; skip surrogate code points\n";
    str += "                       %xE000-10FFFF\n";
    str += "\n";
    str += "normal-escapable     = %x62 / ; b BS backspace U+0008\n";
    str += "                       %x66 / ; f FF form feed U+000C\n";
    str += "                       %x6E / ; n LF line feed U+000A\n";
    str += "                       %x72 / ; r CR carriage return U+000D\n";
    str += "                       %x74 / ; t HT horizontal tab U+0009\n";
    str += "                       \"'\" /  ; ' apostrophe U+0027\n";
    str += "                       \"\\\" /  ; \\ backslash (reverse solidus) U+005C\n";
    str += "                       (%x75 normal-hexchar)\n";
    str += "                                       ; certain values u00xx U+00XX\n";
    str += "normal-hexchar       = \"0\" \"0\"\n";
    str += "                       (\n";
    str += "                          (\"0\" %x30-37) / ; \"00\"-\"07\"\n";
    str += "                             ; omit U+0008-U+000A BS HT LF\n";
    str += "                          (\"0\" %x62) /    ; \"0b\"\n";
    str += "                             ; omit U+000C-U+000D FF CR\n";
    str += "                          (\"0\" %x65-66) / ; \"0e\"-\"0f\"\n";
    str += "                          (\"1\" normal-HEXDIG)\n";
    str += "                       )\n";
    str += "normal-HEXDIG        = DIGIT / %x61-66    ; \"0\"-\"9\", \"a\"-\"f\"\n";
    str += "normal-index-selector = \"0\" / (DIGIT1 *DIGIT)\n";
    str += "                        ; non-negative decimal integer\n";
    str += "\n";
    str += "; Surrogate named rules\n";
    str += "dot-prefix          = \".\"\n";
    str += "double-dot-prefix   = \"..\"\n";
    str += "left-bracket        = \"[\"\n";
    str += "right-bracket       = \"]\"\n";
    str += "left-paren          = \"(\"\n";
    str += "right-paren         = \")\"\n";
    str += "comma               = \",\"\n";
    str += "colon               = \":\"\n";
    str += "dquote              = %x22 ; \"\n";
    str += "squote              = %x27 ; '\n";
    str += "questionmark        = \"?\"\n";
    str += "disjunction         = \"||\"\n";
    str += "conjunction         = \"&&\"\n";
    return str;
  }
}
